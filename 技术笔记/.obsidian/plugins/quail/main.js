/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module2) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
        var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
        return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
      } }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, v = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), c);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: c, y: h, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, g = "en", D = {};
      D[g] = M;
      var p = function(t2) {
        return t2 instanceof b;
      }, S = function t2(e2, n2, r2) {
        var i2;
        if (!e2)
          return g;
        if ("string" == typeof e2) {
          var s2 = e2.toLowerCase();
          D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
          var u2 = e2.split("-");
          if (!i2 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i2 = a2;
        }
        return !r2 && i2 && (g = i2), i2 || !r2 && g;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = "object" == typeof e2 ? e2 : {};
        return n2.date = t2, n2.args = arguments, new b(n2);
      }, O = v;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var b = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (null === e2)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r2 = e2.match($);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === l);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, f2 = O.p(t2), l2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, $2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
          switch (f2) {
            case h:
              return r2 ? l2(1, 0) : l2(31, 11);
            case c:
              return r2 ? l2(1, M3) : l2(0, M3 + 1);
            case o:
              var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
              return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return $2(v2 + "Hours", 0);
            case u:
              return $2(v2 + "Minutes", 1);
            case s:
              return $2(v2 + "Seconds", 2);
            case i:
              return $2(v2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === c || o2 === h) {
            var y2 = this.clone().set(d, 1);
            y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            l2 && this.$d[l2]($2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, f2) {
          var d2, l2 = this;
          r2 = Number(r2);
          var $2 = O.p(f2), y2 = function(t2) {
            var e2 = w(l2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
          };
          if ($2 === c)
            return this.set(c, this.$M + r2);
          if ($2 === h)
            return this.set(h, this.$y + r2);
          if ($2 === a)
            return y2(1);
          if ($2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || l;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
          }, d2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, $2 = f2 || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          };
          return r2.replace(y, function(t3, r3) {
            return r3 || function(t4) {
              switch (t4) {
                case "YY":
                  return String(e2.$y).slice(-2);
                case "YYYY":
                  return O.s(e2.$y, 4, "0");
                case "M":
                  return a2 + 1;
                case "MM":
                  return O.s(a2 + 1, 2, "0");
                case "MMM":
                  return h2(n2.monthsShort, a2, c2, 3);
                case "MMMM":
                  return h2(c2, a2);
                case "D":
                  return e2.$D;
                case "DD":
                  return O.s(e2.$D, 2, "0");
                case "d":
                  return String(e2.$W);
                case "dd":
                  return h2(n2.weekdaysMin, e2.$W, o2, 2);
                case "ddd":
                  return h2(n2.weekdaysShort, e2.$W, o2, 3);
                case "dddd":
                  return o2[e2.$W];
                case "H":
                  return String(s2);
                case "HH":
                  return O.s(s2, 2, "0");
                case "h":
                  return d2(1);
                case "hh":
                  return d2(2);
                case "a":
                  return $2(s2, u2, true);
                case "A":
                  return $2(s2, u2, false);
                case "m":
                  return String(u2);
                case "mm":
                  return O.s(u2, 2, "0");
                case "s":
                  return String(e2.$s);
                case "ss":
                  return O.s(e2.$s, 2, "0");
                case "SSS":
                  return O.s(e2.$ms, 3, "0");
                case "Z":
                  return i2;
              }
              return null;
            }(t3) || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, l2) {
          var $2, y2 = this, M3 = O.p(d2), m3 = w(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
            return O.m(y2, m3);
          };
          switch (M3) {
            case h:
              $2 = D2() / 12;
              break;
            case c:
              $2 = D2();
              break;
            case f:
              $2 = D2() / 3;
              break;
            case o:
              $2 = (g2 - v2) / 6048e5;
              break;
            case a:
              $2 = (g2 - v2) / 864e5;
              break;
            case u:
              $2 = g2 / n;
              break;
            case s:
              $2 = g2 / e;
              break;
            case i:
              $2 = g2 / t;
              break;
            default:
              $2 = g2;
          }
          return l2 ? $2 : O.a($2);
        }, m2.daysInMonth = function() {
          return this.endOf(c).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), _ = b.prototype;
      return w.prototype = _, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t2) {
        _[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, b, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[g], w.Ls = D, w.p = {}, w;
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuailPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/modal.ts
var import_obsidian = require("obsidian");
function constructModalTitle(title) {
  const div = document.createElement("div");
  const h2 = document.createElement("h2");
  const center = document.createElement("center");
  center.appendText(title);
  h2.appendChild(center);
  div.appendChild(h2);
  return div;
}
var MessageModal = class extends import_obsidian.Modal {
  constructor(app2, { title, message }) {
    super(app2);
    this.message = "";
    this.title = "";
    this.message = message;
    this.title = title || "A Message from Quail";
  }
  onOpen() {
    const { contentEl } = this;
    const text = this.message.replace(/\n/g, "<br/>");
    const titleEl = constructModalTitle(this.title);
    contentEl.appendChild(titleEl);
    const p = document.createElement("p");
    p.className = "text-center";
    p.appendText(text);
    contentEl.appendChild(p);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PublishResultModal = class extends import_obsidian.Modal {
  constructor(app2, client, listID, slug, url) {
    super(app2);
    this.url = "";
    this.client = null;
    this.listID = "";
    this.slug = "";
    this.url = url;
    this.client = client;
    this.listID = listID;
    this.slug = slug;
  }
  onOpen() {
    const { contentEl } = this;
    const titleEl = constructModalTitle("Your post has been published!");
    contentEl.appendChild(titleEl);
    const p = document.createElement("p");
    p.className = "text-center";
    const a = document.createElement("a");
    a.href = this.url;
    a.target = "_blank";
    a.appendText(this.url);
    p.appendChild(a);
    contentEl.appendChild(p);
    const p2 = document.createElement("p");
    p2.className = "text-center";
    const a2 = document.createElement("a");
    a2.href = this.url;
    a2.target = "_blank";
    const button = document.createElement("button");
    button.appendText("Visit");
    a2.appendChild(button);
    p2.appendChild(a2);
    contentEl.appendChild(p2);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var LoadingModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
  }
  onOpen() {
    const { contentEl } = this;
    const titleEl = constructModalTitle("Loading...");
    contentEl.appendChild(titleEl);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ErrorModal = class extends import_obsidian.Modal {
  constructor(app2, error) {
    super(app2);
    this.message = "";
    this.message = error.message;
  }
  onOpen() {
    const { contentEl } = this;
    const titleEl = constructModalTitle("Ooooops, something went wrong");
    contentEl.appendChild(titleEl);
    const p = document.createElement("p");
    p.className = "text-center";
    p.appendText("Error Message");
    const pre = document.createElement("pre");
    pre.className = "error-message";
    const code = document.createElement("code");
    code.appendText(this.message);
    pre.appendChild(code);
    p.appendChild(pre);
    contentEl.appendChild(p);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/util.ts
var import_obsidian2 = require("obsidian");
var util_default = {
  getImagePaths: function(markdownContent) {
    const imageRegex = /!\[(.*?)\]\((.*?)\)/g;
    const matches = [];
    let match = null;
    while (match = imageRegex.exec(markdownContent)) {
      if (match && match.length > 2) {
        const item = match[2];
        if (!item.startsWith("https://") && !item.startsWith("http://")) {
          matches.push(item);
        }
      }
    }
    return matches;
  },
  getMimeType: function(ext) {
    const mimeTypeMap = {
      "jpg": "image/jpeg",
      "jpeg": "image/jpeg",
      "png": "image/png",
      "gif": "image/gif",
      "bmp": "image/bmp",
      "webp": "image/webp",
      "svg": "image/svg+xml"
    };
    const mimeType = mimeTypeMap[ext.toLowerCase()];
    if (!mimeType) {
      return null;
    }
    return mimeType;
  },
  getActiveFileFrontmatter: function(app2, editor) {
    const file = app2.workspace.getActiveFile();
    const text = editor.getDoc().getValue();
    let content = text;
    if (file === null) {
      return { frontmatter: null, content: "" };
    }
    const frontmatter = {};
    const fc = app2.metadataCache.getFileCache(file);
    const fmc = fc == null ? void 0 : fc.frontmatter;
    const fmp = fc == null ? void 0 : fc.frontmatterPosition;
    if (fmc && fmp && fmc !== void 0) {
      const end = fmp.end.line + 1;
      content = text.split("\n").slice(end).join("\n");
      for (const key in fmc) {
        if (Object.prototype.hasOwnProperty.call(fmc, key)) {
          const item = fmc[key];
          frontmatter[key] = item;
        }
      }
      console.log("get frontmatter:", frontmatter);
    }
    return {
      frontmatter,
      position: fmp,
      content
    };
  },
  getCoverImage: function(path) {
    const files = app.vault.getFiles();
    for (let ix = 0; ix < files.length; ix++) {
      const fd = files[ix];
      if (fd.path === path) {
        return fd;
      }
    }
    return null;
  },
  getImageFiles: function(currentMd) {
    var _a;
    const resolvedLinks = app.metadataCache.resolvedLinks;
    const files = [];
    for (const [mdFile, links] of Object.entries(resolvedLinks)) {
      if (currentMd.path === mdFile) {
        for (const [filePath, nr] of Object.entries(links)) {
          const ext = ((_a = filePath.split(".").pop()) == null ? void 0 : _a.toLocaleLowerCase()) || "";
          if (this.getMimeType(ext) !== null) {
            try {
              const AttachFile = app.vault.getAbstractFileByPath(filePath);
              if (AttachFile instanceof import_obsidian2.TFile) {
                files.push(AttachFile);
              }
            } catch (error) {
              console.error(error);
            }
          }
        }
      }
    }
    return files;
  },
  getActiveFileContent: async function(app2, editor) {
    var _a;
    const file = app2.workspace.getActiveFile();
    if (file) {
      console.log("currnet file", file.path);
      const { frontmatter: fmc, content } = this.getActiveFileFrontmatter(app2, editor);
      const coverImagePath = ((_a = fmc == null ? void 0 : fmc.cover_image_url) == null ? void 0 : _a.trim()) || "";
      const imgFiles = this.getImageFiles(file);
      const coverFile = this.getCoverImage(coverImagePath);
      imgFiles.push(coverFile);
      let coverImage = null;
      const images = [];
      for (let ix = 0; ix < imgFiles.length; ix++) {
        const fd = imgFiles[ix];
        if (fd) {
          const mimeType = this.getMimeType(fd.extension);
          if (mimeType === "") {
            continue;
          }
          const img = await app2.vault.readBinary(fd);
          if (img.byteLength) {
            console.log(`found: ${fd.path}, size: ${img.byteLength}`);
            const imgWrapper = {
              pathname: fd.path,
              name: fd.name,
              data: img,
              mimeType
            };
            if (fd.path === coverImagePath) {
              coverImage = imgWrapper;
            }
            images.push(imgWrapper);
          }
        }
      }
      const title = file.name.replace(/\.md$/, "");
      return {
        title,
        content,
        frontmatter: {
          title: (fmc == null ? void 0 : fmc.title) || "",
          slug: (fmc == null ? void 0 : fmc.slug) || "",
          tags: (fmc == null ? void 0 : fmc.tags) || "",
          datetime: (fmc == null ? void 0 : fmc.datetime) || "",
          summary: (fmc == null ? void 0 : fmc.summary) || "",
          cover_image_url: (fmc == null ? void 0 : fmc.cover_image_url) || "",
          cover_image: coverImage
        },
        images,
        err: null
      };
    }
    return {
      title: "",
      content: "",
      frontmatter: null,
      images: [],
      err: "no active file"
    };
  },
  replaceImageUrls: function(content, oldUrls, newUrls) {
    if (oldUrls.length !== newUrls.length) {
      console.log("the number of old and new urls do not match, return original content");
      return content;
    }
    const urlMap = {};
    for (let ix = 0; ix < oldUrls.length; ix++) {
      const oldUrl = oldUrls[ix];
      const newUrl = newUrls[ix];
      urlMap[oldUrl] = {
        used: false,
        newUrl
      };
    }
    const lines = content.split("\n").map((line) => line.trim());
    const newLines = [];
    const secondRoundLines = [];
    for (let ix = 0; ix < lines.length; ix++) {
      const line = lines[ix];
      let newLine = line;
      if (line.startsWith("![") && line.endsWith(")")) {
        const match = line.match(/!\[(.*?)\]\((.*?)\)/);
        if (match !== null && match.length > 1) {
          const oldUrl = decodeURIComponent(match[2]);
          if (urlMap[oldUrl]) {
            newLine = line.replace(`(${match[2]})`, `(${urlMap[oldUrl].newUrl})`);
            urlMap[oldUrl].used = true;
          } else {
            console.log("replaceImageUrls:ignore image", oldUrl);
          }
        }
      } else if (line.startsWith("![[") && line.endsWith("]]")) {
        const match = line.match(/!\[\[(.*?)\]\]/);
        if (match !== null && match.length > 0) {
          const oldUrl = decodeURIComponent(match[1]);
          const name = oldUrl.split("/").pop();
          if (urlMap[oldUrl]) {
            newLine = line.replace(`![[${match[1]}]]`, `![${name || oldUrl}](${urlMap[oldUrl].newUrl})`);
            urlMap[oldUrl].used = true;
          } else {
            secondRoundLines.push({ line, index: ix });
          }
        }
      }
      newLines.push(newLine);
    }
    for (let ix = 0; ix < secondRoundLines.length; ix++) {
      const { index, line } = secondRoundLines[ix];
      let newLine = line;
      if (line.startsWith("![[") && line.endsWith("]]")) {
        const match = line.match(/!\[\[(.*?)\]\]/);
        if (match !== null && match.length > 0) {
          const name = decodeURIComponent(match[1]);
          let handled = false;
          for (const k in urlMap) {
            if (urlMap[k].used === false && k.endsWith(name)) {
              newLine = line.replace(`![[${match[1]}]]`, `![${name}](${urlMap[k].newUrl})`);
              handled = true;
            }
          }
          if (!handled) {
            console.log("replaceImageUrls:ignore image", name);
          }
        }
      }
      newLines[index] = newLine;
    }
    return newLines.join("\n");
  }
};

// src/frontmatter.ts
var import_dayjs = __toESM(require_dayjs_min());
function encodeQuote(str) {
  return str.replace(/"/g, '\\"');
}
var frontmatter_default = {
  suggestFrontmatter: async function(client, title, content, images) {
    const ret = {};
    const now = (0, import_dayjs.default)();
    ret["datetime"] = now.format("YYYY-MM-DD HH:mm");
    const resp = await client.generateFrontmatter(title, content);
    ret["slug"] = encodeQuote(resp.slug);
    ret["summary"] = encodeQuote(resp.summary);
    ret["tags"] = encodeQuote(resp.tags);
    ret["cover_image_url"] = "";
    return `---
slug: "${ret.slug}"
datetime: "${ret.datetime}"
summary: "${ret.summary}"
tags: "${ret.tags}"
cover_image_url: "${ret.cover_image_url}"
---

`;
  },
  emptyFrontmatter: function() {
    const now = (0, import_dayjs.default)();
    return `---
slug: "INSERT_YOUR_SLUG_HERE"
datetime: "${now.format("YYYY-MM-DD HH:mm")}"
summary: "INSERT_YOUR_SUMMARY_HERE"
tags: "INSERT_YOUR_TAGS_HERE"
cover_image_url: ""
---

`;
  },
  verifyFrontmatter: function(frontmatter) {
    const keys = {};
    if (!frontmatter.slug) {
      return { verified: false, reason: "`slug` is required" };
    }
    for (const key in frontmatter) {
      if (Object.prototype.hasOwnProperty.call(frontmatter, key)) {
        const value = frontmatter[key];
        const obj = { validated: false, reason: "" };
        switch (key) {
          case "slug":
            if (typeof value === "string") {
              if (/^[a-zA-Z0-9-]+$/.test(value)) {
                obj.validated = true;
              } else {
                obj.reason = "`slug` can only contain english, number and dash";
              }
            } else {
              obj.reason = "`slug` must be string";
            }
            keys[key] = obj;
            break;
          case "title":
            if (typeof value === "string") {
              obj.validated = true;
            } else {
              obj.reason = "`title` must be string";
            }
            keys[key] = obj;
            break;
          case "tags": {
            console.log(typeof value, value.constructor.name);
            const re = /\s*([^\s,]+)\s*(?:,\s*|$)/g;
            if (typeof value === "string") {
              const trimed = value.trim();
              if (trimed.length !== 0) {
                if (re.test(trimed)) {
                  obj.validated = true;
                } else {
                  obj.reason = "`tags` must be string, split by comma";
                }
              } else {
                obj.validated = true;
              }
            } else if (Array.isArray(value)) {
              obj.validated = true;
            } else {
              obj.reason = "`tags` must be string";
            }
            keys[key] = obj;
            break;
          }
          case "datetime":
            if (typeof value === "string") {
              obj.validated = true;
            } else {
              obj.reason = "`datetime` must be date string";
            }
            keys[key] = obj;
            break;
          case "summary":
            if (typeof value === "string") {
              obj.validated = true;
            } else {
              obj.reason = "`summary` must be string";
            }
            keys[key] = obj;
            break;
          case "cover_image_url":
            if (typeof value === "string") {
              obj.validated = true;
            } else {
              obj.reason = "`cover_image_url` must be string";
            }
            keys[key] = obj;
            break;
          default:
            break;
        }
      }
    }
    for (const key in keys) {
      if (Object.prototype.hasOwnProperty.call(keys, key)) {
        const item = keys[key];
        if (!item.validated) {
          return item;
        }
      }
    }
    return { verified: true, reason: "" };
  },
  formalizeFrontmatter: function(frontmatter, text) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const ret = {};
    if (((_a = frontmatter == null ? void 0 : frontmatter.slug) == null ? void 0 : _a.trim().length) === 0) {
      return false;
    }
    ret.slug = frontmatter.slug.trim();
    if (((_b = frontmatter == null ? void 0 : frontmatter.datetime) == null ? void 0 : _b.trim().length) !== 0) {
      try {
        ret.datetime = (0, import_dayjs.default)(frontmatter.datetime.trim()).format("YYYY-MM-DDTHH:mm:ssZ");
      } catch (e) {
        ret.datetime = (0, import_dayjs.default)().format("YYYY-MM-DDTHH:mm:ssZ");
      }
    } else {
      ret.datetime = (0, import_dayjs.default)().format("YYYY-MM-DDTHH:mm:ssZ");
    }
    if (((_c = frontmatter == null ? void 0 : frontmatter.summary) == null ? void 0 : _c.trim().length) !== 0) {
      ret.summary = ((_d = frontmatter.summary) == null ? void 0 : _d.trim().slice(0, 120)) || text.trim().slice(0, 120);
    } else {
      ret.summary = text.trim().slice(0, 120);
    }
    if (((_e = frontmatter == null ? void 0 : frontmatter.cover_image_url) == null ? void 0 : _e.trim().length) !== 0) {
      ret.cover_image_url = ((_f = frontmatter.cover_image_url) == null ? void 0 : _f.trim()) || "";
    }
    if ((frontmatter == null ? void 0 : frontmatter.tags.constructor.name) === "Array") {
      if ((frontmatter == null ? void 0 : frontmatter.tags.length) !== 0) {
        ret.tags = frontmatter.tags.join(",") || "";
      }
      const tags = frontmatter.tags.map((x) => {
        if (typeof x === "string") {
          return x.trim();
        }
        return "";
      }).filter((x) => x.length !== 0);
      ret.tags = tags.join(",") || "";
    } else if ((frontmatter == null ? void 0 : frontmatter.tags.constructor.name) === "String") {
      if (((_g = frontmatter == null ? void 0 : frontmatter.tags) == null ? void 0 : _g.trim().length) !== 0) {
        ret.tags = ((_h = frontmatter.tags) == null ? void 0 : _h.trim()) || "";
      }
    } else {
      ret.tags = "";
    }
    if (((_i = frontmatter == null ? void 0 : frontmatter.title) == null ? void 0 : _i.trim().length) !== 0) {
      ret.title = ((_j = frontmatter.title) == null ? void 0 : _j.trim()) || "";
    }
    return ret;
  }
};

// src/action.ts
async function uploadAttachment(client, image) {
  const formData = new FormData();
  const picArray = new Uint8Array(image.data).buffer;
  formData.append("file", new Blob([picArray], { type: image.mimeType }), image.name);
  const resp = await client.uploadAttachment(formData);
  return resp.view_url;
}
async function arrangeArticle(app2, editor, client, settings) {
  const { title, content, frontmatter, images, err } = await util_default.getActiveFileContent(app2, editor);
  if (err != null) {
    new MessageModal(app2, { message: err.toString() }).open();
    return { frontmatter: null, content: null };
  }
  const { verified, reason } = frontmatter_default.verifyFrontmatter(frontmatter);
  if (!verified) {
    new MessageModal(app2, { title: "Failed to verify the metadata", message: reason }).open();
    return { frontmatter: null, content: null };
  }
  const oldUrls = [];
  const newUrls = [];
  for (let ix = 0; ix < images.length; ix++) {
    const img = images[ix];
    if (img) {
      try {
        const viewUrl = await uploadAttachment(client, img);
        newUrls.push(viewUrl);
        oldUrls.push(img.pathname);
        console.log(`upload image: ${img.pathname}, new url: ${viewUrl}`);
      } catch (e) {
        console.log("upload image error: ", e);
        new ErrorModal(app2, new Error(e)).open();
        return { frontmatter: null, content: null };
      }
    }
  }
  if (frontmatter == null ? void 0 : frontmatter.cover_image) {
    try {
      const viewUrl = await uploadAttachment(client, frontmatter.cover_image);
      frontmatter.cover_image_url = viewUrl;
      console.log(`upload cover: ${frontmatter.cover_image.pathname}, new url: ${viewUrl}`);
    } catch (e) {
      console.log("upload cover error: ", e);
      new ErrorModal(app2, new Error(e)).open();
      return { frontmatter: null, content: null };
    }
  }
  const newContent = util_default.replaceImageUrls(content, oldUrls, newUrls).trim() || "";
  const fmt = frontmatter_default.formalizeFrontmatter(frontmatter, newContent);
  return {
    title,
    frontmatter: fmt,
    content: newContent
  };
}
async function savePost(app2, editor, client, settings) {
  const { title, frontmatter, content } = await arrangeArticle(app2, editor, client, settings);
  if (frontmatter == null || content == null) {
    return;
  }
  const payload = {
    slug: frontmatter.slug,
    title: frontmatter.title || title,
    cover_image_url: frontmatter.cover_image_url,
    summary: frontmatter.summary,
    content,
    tags: frontmatter.tags
  };
  let resp = null;
  try {
    resp = await client.createPost(settings.listID, payload);
  } catch (e) {
    new ErrorModal(app2, e).open();
    return;
  } finally {
  }
  return resp;
}
function getActions(client, app2, settings) {
  return [
    {
      id: "quail-publish",
      name: "Publish",
      editorCallback: async (editor, view) => {
        const loadingModal = new LoadingModal(app2);
        loadingModal.open();
        let pt = null;
        try {
          pt = await savePost(app2, editor, client, settings);
        } catch (e) {
          new ErrorModal(app2, e).open();
          loadingModal.close();
          return;
        }
        try {
          pt = await client.publishPost(settings.listID, pt.slug);
        } catch (e) {
          new ErrorModal(app2, e).open();
          loadingModal.close();
          return;
          ErrorModal;
        } finally {
          loadingModal.close();
        }
        const slug = pt.slug || "";
        if (slug) {
          const viewUrl = `${settings.host}/${settings.listID}/p/${slug}`;
          new PublishResultModal(app2, client, settings.listID, slug, viewUrl).open();
        } else {
          new MessageModal(app2, { message: "resp.slug is empty." }).open();
          return;
        }
      }
    },
    {
      id: "unpublish",
      name: "Unpublish",
      editorCallback: async (editor, view) => {
        const { frontmatter, err } = await util_default.getActiveFileContent(app2, editor);
        if (err != null) {
          new ErrorModal(app2, new Error(err)).open();
          return;
        }
        const loadingModal = new LoadingModal(app2);
        loadingModal.open();
        try {
          await client.unpublishPost(settings.listID, frontmatter == null ? void 0 : frontmatter.slug);
          new MessageModal(app2, {
            title: "Unpublish",
            message: "This post has removed from published list."
          }).open();
        } catch (e) {
          loadingModal.close();
          new ErrorModal(app2, e).open();
        } finally {
          loadingModal.close();
        }
      }
    },
    {
      id: "save",
      name: "Save",
      editorCallback: async (editor, view) => {
        const loadingModal = new LoadingModal(app2);
        loadingModal.open();
        let pt = null;
        try {
          pt = await savePost(app2, editor, client, settings);
        } catch (e) {
          new ErrorModal(app2, e).open();
          loadingModal.close();
          return;
        } finally {
          loadingModal.close();
        }
        const slug = pt.slug || "";
        if (slug && pt.published_at != null) {
          const viewUrl = `${settings.host}/${settings.listID}/p/${slug}`;
          new PublishResultModal(app2, client, settings.listID, slug, viewUrl).open();
        }
      }
    },
    {
      id: "deliver",
      name: "Deliver",
      editorCallback: async (editor, view) => {
        const { frontmatter, err } = await util_default.getActiveFileContent(app2, editor);
        if (err != null) {
          new MessageModal(app2, { message: err.toString() }).open();
          return;
        }
        const loadingModal = new LoadingModal(app2);
        loadingModal.open();
        try {
          await client.deliverPost(settings.listID, frontmatter == null ? void 0 : frontmatter.slug);
          new MessageModal(app2, {
            title: "Delivery Requested",
            message: "This post has been added into the delivery queue. It may take a few minutes to send out."
          }).open();
        } catch (e) {
          loadingModal.close();
          console.log("deliver error: ", e);
          new ErrorModal(app2, e).open();
          return;
        } finally {
          loadingModal.close();
        }
      }
    },
    {
      id: "ai-gen-metadata",
      name: "Generate metadata by AI",
      editorCallback: async (editor, view) => {
        var _a, _b, _c, _d;
        const { frontmatter, content, position } = util_default.getActiveFileFrontmatter(app2, editor);
        const file = app2.workspace.getActiveFile();
        if (file) {
          const loadingModal = new LoadingModal(app2);
          loadingModal.open();
          const title = file.name.replace(/\.md$/, "");
          let fmc = null;
          if (frontmatter === null || Object.values(frontmatter).length === 0) {
            try {
              fmc = await frontmatter_default.suggestFrontmatter(client, title, content, []);
              editor.setCursor({ line: 0, ch: 0 });
              editor.replaceSelection(fmc);
            } catch (e) {
              loadingModal.close();
              new ErrorModal(app2, e).open();
            } finally {
              loadingModal.close();
            }
          } else {
            try {
              fmc = await frontmatter_default.suggestFrontmatter(client, title, content, []);
              editor.setSelection(
                { line: (_a = position.start) == null ? void 0 : _a.line, ch: (_b = position.start) == null ? void 0 : _b.col },
                { line: (_c = position.end) == null ? void 0 : _c.line, ch: (_d = frontmatter == null ? void 0 : frontmatter.end) == null ? void 0 : _d.col }
              );
              editor.replaceSelection(fmc);
            } catch (e) {
              loadingModal.close();
              new ErrorModal(app2, e).open();
            } finally {
              loadingModal.close();
            }
          }
        }
      }
    },
    {
      id: "insert-metadata",
      name: "Insert metadata template",
      editorCallback: async (editor, view) => {
        const { frontmatter } = util_default.getActiveFileFrontmatter(app2, editor);
        const file = app2.workspace.getActiveFile();
        if (file) {
          if (frontmatter === null || Object.values(frontmatter).length === 0) {
            editor.setCursor({ line: 0, ch: 0 });
            const fmc = await frontmatter_default.emptyFrontmatter();
            editor.replaceSelection(fmc);
          } else {
            console.log("current frontmatter: ", frontmatter);
            const modal = new MessageModal(app2, { title: "Metadata already exists", message: "Please edit manually or use AI to generate it" });
            modal.open();
          }
        }
      }
    }
    // {
    //   id: 'test',
    //   name: "Test",
    //   editorCallback: async (editor: Editor, view: MarkdownView) => {
    //   }
    // }
  ];
}

// node_modules/quail-js/dist/quail.min.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var Client = (
  /** @class */
  function() {
    function Client2(opts) {
      this.apibase = "";
      this.apikey = "";
      this.access_token = "";
      this.debug = false;
      this.apikey = opts.apikey || "";
      this.access_token = opts.access_token || "";
      this.apibase = opts.apibase || "https://api.quail.ink";
      this.debug = opts.debug || false;
    }
    Client2.prototype.getAccessToken = function() {
      var token = this.access_token;
      if (token === "") {
        var auth = localStorage.getItem("auth");
        if (auth) {
          try {
            var authObj = JSON.parse(auth);
            token = authObj.access_token || authObj.token;
          } catch (e) {
            token = "";
          }
        }
      }
      if (token === "") {
        token = window._access_token;
      }
      return token;
    };
    Client2.prototype.request = function(url, method, body) {
      return __awaiter(this, void 0, void 0, function() {
        var headers, token, resp, json;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = this.apibase + url;
              headers = {
                "Content-Type": "application/json"
              };
              token = this.getAccessToken();
              if (token) {
                headers["Authorization"] = "Bearer ".concat(token);
              }
              if (this.apikey) {
                headers["X-QUAIL-Key"] = this.apikey;
              }
              if (this.debug) {
                console.log("request method", method);
                console.log("request url", url);
                console.log("request headers", headers);
                console.log("request body", body);
              }
              return [4, fetch(url, {
                method,
                headers,
                body: body ? JSON.stringify(body) : null
              })];
            case 1:
              resp = _a.sent();
              return [4, resp.json()];
            case 2:
              json = _a.sent();
              if (this.debug) {
                console.log("resp json", json);
              }
              if (json.code) {
                console.log("quail client error", json.code, json.message || json.msg);
                throw new Error("".concat(json.code, " | ").concat(json.message || json.msg, " | ").concat(method, " ").concat(url));
              }
              return [2, json.data];
          }
        });
      });
    };
    Client2.prototype.requestFormData = function(url, body) {
      return __awaiter(this, void 0, void 0, function() {
        var headers, token, resp, json;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = this.apibase + url;
              headers = {};
              token = this.getAccessToken();
              if (token) {
                headers["Authorization"] = "Bearer ".concat(token);
              }
              if (this.apikey) {
                headers["X-QUAIL-Key"] = this.apikey;
              }
              if (this.debug) {
                console.log("request url", url);
                console.log("request headers", headers);
                console.log("request body", body);
              }
              return [4, fetch(url, {
                method: "POST",
                headers,
                body: body || null
              })];
            case 1:
              resp = _a.sent();
              return [4, resp.json()];
            case 2:
              json = _a.sent();
              if (this.debug) {
                console.log("resp json", json);
              }
              if (json.code) {
                console.log("quail client error", json.code, json.message || json.msg);
                throw new Error("".concat(json.code, " | ").concat(json.message || json.msg, " | POST ").concat(url));
              }
              return [2, json.data || { code: json === null || json === void 0 ? void 0 : json.code, message: json === null || json === void 0 ? void 0 : json.message }];
          }
        });
      });
    };
    Client2.prototype.getAuthCode = function(email, ctoken) {
      var lang = navigator.language;
      if (lang.length > 2) {
        lang = lang.substring(0, 2);
      }
      return this.request("/auth/code", "POST", {
        email,
        lang,
        "challenge-action": "request_auth_code",
        "challenge-token": ctoken
      });
    };
    Client2.prototype.login = function(email, code) {
      var lang = navigator.language;
      if (lang.length > 2) {
        lang = lang.substring(0, 2);
      }
      return this.request("/auth/login", "POST", {
        "method": "email_code",
        "email": email,
        "code": code,
        "lang": lang
      });
    };
    Client2.prototype.getAssets = function() {
      return this.request("/assets", "GET", null);
    };
    Client2.prototype.getAsset = function(assetId) {
      return this.request("/assets/".concat(assetId), "GET", null);
    };
    Client2.prototype.getMe = function() {
      return this.request("/users/me", "GET", null);
    };
    Client2.prototype.updateMe = function(profile) {
      return this.request("/users/me", "PUT", profile);
    };
    Client2.prototype.subscribe = function(list_id, email, ctoken) {
      return this.request("/subscriptions/".concat(list_id), "POST", {
        email,
        "challenge-action": "subscribe",
        "challenge-token": ctoken
      });
    };
    Client2.prototype.batchAddSubscribers = function(list_id, members, ctoken) {
      return this.request("/subscriptions/".concat(list_id, "/add-members"), "POST", {
        "challenge-action": "subscribe",
        "challenge-token": ctoken,
        "members": members
      });
    };
    Client2.prototype.updateSubscriber = function(list_id, member_id, payload) {
      return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), "PUT", payload);
    };
    Client2.prototype.deleteSubscriber = function(list_id, member_id) {
      return this.request("/subscriptions/".concat(list_id, "/members/").concat(member_id), "DELETE", null);
    };
    Client2.prototype.getMySubscriptions = function() {
      return this.request("/subscriptions", "GET", null);
    };
    Client2.prototype.getMySubscription = function(list_id) {
      return this.request("/subscriptions/".concat(list_id, "/rel"), "GET", null);
    };
    Client2.prototype.subscribeNoChallenge = function(list_id) {
      return this.request("/subscriptions/".concat(list_id, "/no-challenge"), "POST", null);
    };
    Client2.prototype.unsubscribe = function(list_id, trace_id) {
      if (trace_id === void 0) {
        trace_id = "";
      }
      return this.request("/subscriptions/".concat(list_id), "DELETE", { trace_id });
    };
    Client2.prototype.upgradeSubscription = function(list_id, redirect_url, plan, dur) {
      if (redirect_url === void 0) {
        redirect_url = "";
      }
      if (plan === void 0) {
        plan = "silver";
      }
      if (dur === void 0) {
        dur = 90;
      }
      return this.request("/subscriptions/".concat(list_id, "/upgrade?redirect_url=").concat(redirect_url, "&plan=").concat(plan, "&dur=").concat(dur), "POST", null);
    };
    Client2.prototype.getListPosts = function(list_id, offset, limit, pub) {
      if (offset === void 0) {
        offset = 0;
      }
      if (limit === void 0) {
        limit = 10;
      }
      if (pub === void 0) {
        pub = false;
      }
      var url = "/lists/".concat(list_id, "/posts?offset=").concat(offset, "&limit=").concat(limit);
      if (pub) {
        url += "&public=1";
      }
      return this.request(url, "GET", null);
    };
    Client2.prototype.getListDelivery = function(list_id, offset, limit) {
      if (offset === void 0) {
        offset = 0;
      }
      if (limit === void 0) {
        limit = 10;
      }
      return this.request("/lists/".concat(list_id, "/delivery?offset=").concat(offset, "&limit=").concat(limit), "GET", null);
    };
    Client2.prototype.getPinnedPosts = function(list_id) {
      return this.request("/lists/".concat(list_id, "/pinned"), "GET", null);
    };
    Client2.prototype.pinPosts = function(list_id, ids) {
      return this.request("/lists/".concat(list_id, "/pinned"), "PUT", { ids });
    };
    Client2.prototype.getPost = function(list_id, post_id) {
      return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), "GET", null);
    };
    Client2.prototype.deletePost = function(list_id, post_id) {
      return this.request("/lists/".concat(list_id, "/posts/").concat(post_id), "DELETE", null);
    };
    Client2.prototype.getPostContent = function(list_id, post_id) {
      return this.request("/lists/".concat(list_id, "/posts/").concat(post_id, "/content"), "GET", null);
    };
    Client2.prototype.createList = function(payload) {
      return this.request("/lists", "POST", payload);
    };
    Client2.prototype.getLists = function(user_id) {
      return this.request("/users/".concat(user_id, "/lists"), "GET", null);
    };
    Client2.prototype.getList = function(list_id) {
      return this.request("/lists/".concat(list_id), "GET", null);
    };
    Client2.prototype.getListMetrics = function(list_id) {
      return this.request("/lists/".concat(list_id, "/metrics"), "GET", null);
    };
    Client2.prototype.updateList = function(list_id, payload) {
      return this.request("/lists/".concat(list_id), "PUT", {
        "avatar_image_url": payload.avatar_image_url || "",
        "title": payload.title || "",
        "description": payload.description || ""
      });
    };
    Client2.prototype.updateListTelegram = function(list_id, payload) {
      return this.request("/lists/".concat(list_id, "/telegram"), "PUT", {
        "telegram_bot_token": payload.telegram_bot_token || "",
        "telegram_channel_id": payload.telegram_channel_id || ""
      });
    };
    Client2.prototype.updateListPayments = function(list_id, payload) {
      return this.request("/lists/".concat(list_id, "/payments"), "PUT", payload);
    };
    Client2.prototype.updateListEmailSettings = function(list_id, payload) {
      if (payload.email_signature_text.length > 2048) {
        payload.email_signature_text = payload.email_signature_text.substring(0, 2048);
      }
      if (payload.email_onboarding_text.length > 2048) {
        payload.email_onboarding_text = payload.email_onboarding_text.substring(0, 2048);
      }
      return this.request("/lists/".concat(list_id, "/email_settings"), "PUT", {
        "email_channel_enabled": payload.email_channel_enabled,
        "email_deny_list": payload.email_deny_list || [],
        "email_onboarding_text": payload.email_onboarding_text || "",
        "email_signature_text": payload.email_signature_text || ""
      });
    };
    Client2.prototype.updateListSlug = function(list_id, slug) {
      return this.request("/lists/".concat(list_id, "/slug?slug=").concat(slug), "PUT", null);
    };
    Client2.prototype.getListSubscriptions = function(list_id, offset, limit, email, premium) {
      if (email === void 0) {
        email = "";
      }
      if (premium === void 0) {
        premium = "";
      }
      var url = "/lists/".concat(list_id, "/subscriptions?offset=").concat(offset, "&limit=").concat(limit);
      if (email) {
        url += "&email=".concat(encodeURIComponent(email));
      }
      if (premium) {
        url += "&premium=".concat(premium);
      }
      return this.request(url, "GET", null);
    };
    Client2.prototype.getApikeys = function() {
      return this.request("/apikeys", "GET", null);
    };
    Client2.prototype.deleteApikey = function(id) {
      return this.request("/apikeys/".concat(id), "DELETE", null);
    };
    Client2.prototype.createApikey = function(name) {
      return this.request("/apikeys", "POST", {
        name
      });
    };
    Client2.prototype.generateFrontmatter = function(title, content, includes) {
      if (includes === void 0) {
        includes = [];
      }
      var url = "/composer/frontmatter";
      if (includes.length > 0) {
        url = "".concat(url, "?includes=").concat(includes.map(function(x) {
          return encodeURIComponent(x.toLowerCase());
        }).join(","));
      }
      return this.request(url, "POST", {
        title,
        content
      });
    };
    Client2.prototype.generateMetadata = function(title, content, includes) {
      if (includes === void 0) {
        includes = [];
      }
      var url = "/composer/metadata";
      if (includes.length > 0) {
        url = "".concat(url, "?includes=").concat(includes.map(function(x) {
          return encodeURIComponent(x.toLowerCase());
        }).join(","));
      }
      return this.request(url, "POST", {
        title,
        content
      });
    };
    Client2.prototype.searchPhotos = function(query, page, limit) {
      if (page === void 0) {
        page = 1;
      }
      if (limit === void 0) {
        limit = 10;
      }
      query = encodeURIComponent(query);
      return this.request("/composer/unsplash/photos/search?query=".concat(query, "&page=").concat(page, "&limit=").concat(limit), "GET", null);
    };
    Client2.prototype.getPhotoDownloadUrl = function(endpoint) {
      endpoint = encodeURIComponent(endpoint);
      return this.request("/composer/unsplash/photos/download_url?endpoint=".concat(endpoint), "GET", null);
    };
    Client2.prototype.createPost = function(listID, payload) {
      return this.request("/lists/".concat(listID, "/posts"), "POST", payload);
    };
    Client2.prototype.updatePost = function(listID, postID, payload) {
      return this.request("/lists/".concat(listID, "/posts/").concat(postID, "/update"), "PUT", payload);
    };
    Client2.prototype.publishPost = function(listID, slug) {
      return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/publish"), "PUT", null);
    };
    Client2.prototype.unpublishPost = function(listID, slug) {
      return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/unpublish"), "PUT", null);
    };
    Client2.prototype.deliverPost = function(listID, slug) {
      return this.request("/lists/".concat(listID, "/posts/").concat(slug, "/deliver"), "PUT", null);
    };
    Client2.prototype.uploadAttachment = function(formData) {
      return this.requestFormData("/attachments", formData);
    };
    Client2.prototype.incCount = function(post_id, field) {
      return this.request("/posts/".concat(field, "?id=").concat(post_id), "POST", null);
    };
    Client2.prototype.getExploreTrendingPosts = function(offset, limit) {
      if (offset === void 0) {
        offset = 0;
      }
      if (limit === void 0) {
        limit = 10;
      }
      return this.request("/explore/trending/posts?offset=".concat(offset, "&limit=").concat(limit), "GET", null);
    };
    Client2.prototype.getExploreTrendingLists = function(offset, limit) {
      if (offset === void 0) {
        offset = 0;
      }
      if (limit === void 0) {
        limit = 10;
      }
      return this.request("/explore/trending/lists?offset=".concat(offset, "&limit=").concat(limit), "GET", null);
    };
    return Client2;
  }()
);

// main.ts
var DEFAULT_SETTINGS = {
  apikey: "",
  apibase: "https://api.quail.ink",
  host: "https://quail.ink",
  listID: ""
};
var QuailPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    const client = new Client({
      apikey: this.settings.apikey,
      apibase: this.settings.apibase,
      debug: false
    });
    const actions = getActions(client, this.app, this.settings);
    for (let ix = 0; ix < actions.length; ix++) {
      const action = actions[ix];
      this.addCommand(action);
    }
    this.addSettingTab(new QuailSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var QuailSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Quail API Key").setDesc("Please grab your API key from https://quail.ink/profile/apikeys. Restart Obsidian after you add or change the API key.").addText((text) => text.setPlaceholder("Enter API Key").setValue(this.plugin.settings.apikey).onChange(async (value) => {
      this.plugin.settings.apikey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("List ID or slug").setDesc('Your list ID or slug. You can find it in the URL of your list page. For example, if your list URL is https://quail.ink/my-list, your list ID or slug is "my-list".').addText((text) => text.setPlaceholder("Enter List ID or slug").setValue(this.plugin.settings.listID).onChange(async (value) => {
      this.plugin.settings.listID = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Quail API Base").setDesc("You can change the base URL if you are using a self-hosted version of Quail").addText((text) => text.setPlaceholder("Enter API Base").setValue(this.plugin.settings.apibase).onChange(async (value) => {
      this.plugin.settings.apibase = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Quail Host").setDesc("You can change the host URL if you are using a self-hosted version of Quail").addText((text) => text.setPlaceholder("Enter Host").setValue(this.plugin.settings.host).onChange(async (value) => {
      this.plugin.settings.host = value;
      await this.plugin.saveSettings();
    }));
  }
};
